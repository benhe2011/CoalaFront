diff --git a/node_modules/react-image-annotate/Annotator/reducers/general-reducer.js b/node_modules/react-image-annotate/Annotator/reducers/general-reducer.js
index 6cc5507..e35841c 100644
--- a/node_modules/react-image-annotate/Annotator/reducers/general-reducer.js
+++ b/node_modules/react-image-annotate/Annotator/reducers/general-reducer.js
@@ -17,6 +17,40 @@ var getRandomId = function getRandomId() {
   return Math.random().toString().split(".")[1];
 };
 
+export function fetchNextImage() {
+  // console.log("fetching python localhost");
+  console.log("Trying to fetch next image.")
+  fetch('http://localhost:5000/nextImage',{
+    dataType: 'json'
+  })
+    .then(r => r.json())
+    .then(r => {
+      // console.log(r)
+      const image = r.status.split('\'')[1]
+      console.log("Next image fetched.")
+      return setNewImage(image, currentImageIndex);
+      
+    })
+    .catch(err => console.log(err))
+}
+
+export function fetchPrevImage() {
+  // console.log("fetching python localhost");
+  console.log("Trying to fetch previous image.")
+  fetch('http://localhost:5000/prevImage',{
+    dataType: 'json'
+  })
+    .then(r => r.json())
+    .then(r => {
+      // console.log(r)
+      const image = r.status.split('\'')[1]
+      console.log("Previous image fetched.")
+      return setNewImage(image, currentImageIndex);
+      
+    })
+    .catch(err => console.log(err))
+}
+
 export default (function (state, action) {
   if (state.allowedArea && state.selectedTool !== "modify-allowed-area" && ["MOUSE_DOWN", "MOUSE_UP", "MOUSE_MOVE"].includes(action.type)) {
     var aa = state.allowedArea;
@@ -863,15 +897,17 @@ export default (function (state, action) {
           case "prev":
             {
               if (currentImageIndex === null) return state;
-              if (currentImageIndex === 0) return state;
-              return setNewImage(state.images[currentImageIndex - 1], currentImageIndex - 1);
+              //if (currentImageIndex === 0) return state;
+              //return setNewImage(state.images[currentImageIndex - 1], currentImageIndex - 1);
+              return fetchPrevImage();
             }
 
           case "next":
             {
               if (currentImageIndex === null) return state;
-              if (currentImageIndex === state.images.length - 1) return state;
-              return setNewImage(state.images[currentImageIndex + 1], currentImageIndex + 1);
+              //if (currentImageIndex === state.images.length - 1) return state;
+              //return setNewImage(state.images[currentImageIndex + 1], currentImageIndex + 1);
+              return fetchNextImage();
             }
 
           case "clone":
